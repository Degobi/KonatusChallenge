<!DOCTYPE html>
<html>

<head>
    <title>Konatus Challenge</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap/dist/js/bootstrap.min.js"></script>
</head>

<body>
    <div>
        <canvas id="myChart"></canvas>
    </div>

    <script>
        const ctx = document.getElementById('myChart').getContext('2d');

        const chartDataCandidateA = [ <%- data.CandidatoA.join(', ') %> ];
        const chartDataCandidateB = [ <%- data.CandidatoB.join(', ') %> ];

        const estados = [
            'AC', 'AL', 'AM', 'AP', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA',
            'MG', 'MS', 'MT', 'PA', 'PB', 'PE', 'PI', 'PR', 'RJ', 'RN',
            'RO', 'RR', 'RS', 'SC', 'SE', 'SP', 'TO'
        ];

        const chartData = {
            labels: estados,
            datasets: [
                {
                    label: `# de Votos Candidato A | total (${chartDataCandidateA.reduce((total, voto) => total + voto, 0).toLocaleString('pt-BR')})`,
                    barPercentage: 0.5,
                    barThickness: 6,
                    data: chartDataCandidateA,
                    borderWidth: 1,
                },
                {
                    label: `# de Votos Candidato B | total (${chartDataCandidateB.reduce((total, voto) => total + voto, 0).toLocaleString('pt-BR')})`,
                    barPercentage: 0.5,
                    barThickness: 6,
                    data: chartDataCandidateB,
                    borderWidth: 1,
                },
            ],
        };

        new Chart(ctx, {
            type: 'bar',
            data: chartData,
            options: {
                spanGaps: true,
                layout: {
                    padding: 100
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>

    <div class="container">
        <h1>Importar Pesquisa Eleitoral</h1>
        <div class="row">
            <form class="form-group" method="post" enctype="multipart/form-data"
                onsubmit="sendUpdateRequest(event); return false;">
                <input type="file" name="csv" id="csv-file-input">
                <button class="btn btn-primary" id="updateSendBaseButton" type="submit">Enviar</button>
                <div class="spinner-border text-primary d-none" id="update-loading-indicator" role="status">
                    <span class="visually-hidden">Carregando...</span>
                </div>
            </form>


            <form class="col-md-4" id="updateBaseForm" onsubmit="sendRequest(event); return false;">
                <div class="form-group">
                    <button type="submit" class="btn btn-primary" id="updateBaseButton">Atualizar Base</button>
                    <div class="spinner-border text-primary d-none" id="loading-indicator" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                </div>
            </form>


            <script>
                const updateBaseButton = document.getElementById('updateBaseButton');
                const updateSendBaseButton = document.getElementById('updateSendBaseButton');
                const loadingIndicator = document.getElementById('loading-indicator');
                const updateLoadingIndicator = document.getElementById('update-loading-indicator');

                async function sendUpdateRequest(event) {
                    event.preventDefault();
                    updateSendBaseButton.disabled = true;
                    updateLoadingIndicator.classList.remove('d-none');

                    try {
                        const fileInput = document.getElementById('csv-file-input');
                        const file = fileInput.files[0];

                        const formData = new FormData();
                        formData.append('csv', file);

                        let response = await fetch('/save-csv', {
                            method: 'POST',
                            body: formData,
                        });

                        if (response.ok) {
                            let result = await response.json();

                            if (result != null && result.CandidatoA) {
                                updateChart(result)
                                showMessage('Pesquisa importada com sucesso!');
                            } else {
                                showMessage(result, true)
                            }
                        }

                    } catch (error) {
                        showMessage(error, true);
                    } finally {
                        updateSendBaseButton.disabled = false;
                        updateLoadingIndicator.classList.add('d-none');
                    }
                }

                async function sendRequest(event) {
                    event.preventDefault();
                    updateBaseButton.disabled = true;
                    loadingIndicator.classList.remove('d-none');

                    try {
                        let response = await fetch('/update-base', { method: 'POST' });

                        if (response.ok) {
                            let message = await response.text();
                            showMessage(message);
                        }
                    } catch (error) {
                        showMessage("Ocorreu um erro durante a atualização. Tente novamente mais tarde.", true);
                    } finally {
                        updateBaseButton.disabled = false;
                        loadingIndicator.classList.add('d-none');
                    }
                }

                function showMessage(message, isError = false) {
                    const alertContainer = document.getElementById('alert-container');
                    const alertClass = isError ? 'alert-danger' : 'alert-success';
                    alertContainer.innerHTML = `
                        <div class="alert ${alertClass}" role="alert">
                            ${message}
                        </div>
                    `;

                    setTimeout(clearMessage, 5000);

                    function clearMessage() {
                        alertContainer.innerHTML = '';
                    }
                }

                function updateChart(result) {
                    const ctx = document.getElementById('myChart').getContext('2d');

                    let CandidatoA =  result.CandidatoA.join(', ').split(', ').map(Number);
                    let CandidatoB =  result.CandidatoB.join(', ').split(', ').map(Number);

                    let chartData = {
                        labels: estados,
                        datasets: [
                            {
                                label: `# de Votos Candidato A | Total (${CandidatoA.reduce((total, voto) => total + voto, 0).toLocaleString('pt-BR')})`,
                                data: CandidatoA,
                                borderWidth: 1,
                            },
                            {
                                label: `# de Votos Candidato B | Total (${CandidatoB.reduce((total, voto) => total + voto, 0).toLocaleString('pt-BR')})`,
                                data: CandidatoB,
                                borderWidth: 1,
                            },
                        ],
                    };
                    let chart = Chart.getChart("myChart");

                    if (chart) {
                        chart.destroy();
                    }

                    chart = new Chart(ctx, {
                        type: 'bar',
                        data: chartData,
                        options: {
                            spanGaps: true,
                            layout: {
                                padding: 100,
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                },
                            },
                        },
                    });
                }
            </script>

            <div id="alert-container"></div>

        </div>
    </div>


</body>

</html>